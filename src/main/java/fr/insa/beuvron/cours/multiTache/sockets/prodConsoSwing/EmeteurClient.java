/*
Copyright 2000-2014 Francois de Bertrand de Beuvron

This file is part of CoursBeuvron.

CoursBeuvron is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CoursBeuvron is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CoursBeuvron.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.insa.beuvron.cours.multiTache.sockets.prodConsoSwing;


import fr.insa.beuvron.utils.swing.TestePanel;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.charset.Charset;

/**
 * Un petit client simple qui envoie des lignes de texte entrée par l'utilisateur
 * à un serveur défini par son adresse IP et un port.
 * 
 * L'interaction se fait en deux temps : 
 *   1) connection au serveur
 *   2) envoie au serveur du texte dans la zone message (lorsque l'on tape "return")
 * 
 * Lorsque la connection est établie, on obtient un Socket (TCP). Pour envoyer des
 * données, on utilise le flux sortant associé au socket.
 * @author francois
 */
public class EmeteurClient extends javax.swing.JPanel {

    private BufferedWriter outWriter;
    
    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        EmeteurClient ec = new EmeteurClient();
        TestePanel.pack(ec);
    }

    /**
     * Creates new form EmeteurClient
     */
    public EmeteurClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfIP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfPort = new javax.swing.JTextField();
        jbConnect = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jtfMessage = new javax.swing.JTextField();

        jLabel1.setText("ip :");

        jLabel2.setText("port :");

        jbConnect.setText("Connect");
        jbConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConnectActionPerformed(evt);
            }
        });

        jLabel3.setText("message :");

        jtfMessage.setEnabled(false);
        jtfMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtfIP))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfPort))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbConnect)
                .addGap(0, 328, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtfMessage))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConnectActionPerformed
        try {
            // TODO add your handling code here:
            Socket outSock = new Socket(InetAddress.getByName(this.jtfIP.getText()),
                    Integer.parseInt(this.jtfPort.getText()));
            this.outWriter = new BufferedWriter(new OutputStreamWriter(outSock.getOutputStream(),Charset.forName("UTF8")));
            this.jtfMessage.setEnabled(true);
        } catch (IOException ex) {
            throw new Error(ex);
        }


    }//GEN-LAST:event_jbConnectActionPerformed

    private void jtfMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfMessageActionPerformed
        try {
            // TODO add your handling code here:

            System.out.println("coucou");
            this.outWriter.append(this.jtfMessage.getText()+"\n");
            this.outWriter.flush();
            this.jtfMessage.setText("");
        } catch (IOException ex) {
            throw new Error(ex);
        }
    }//GEN-LAST:event_jtfMessageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbConnect;
    private javax.swing.JTextField jtfIP;
    private javax.swing.JTextField jtfMessage;
    private javax.swing.JTextField jtfPort;
    // End of variables declaration//GEN-END:variables
}
